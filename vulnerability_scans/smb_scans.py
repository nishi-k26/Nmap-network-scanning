#!/usr/bin/python3

import subprocess
from fpdf import FPDF

# List to store the scan results
scan_results = []

def perform_smb_scans(target, scan_results, report_filename="smb_scan_report.pdf"):
    # Perform SMB vulnerability scans if port 445 is open.
    smb_scans = {
        "smb_version_1": ["use", "auxiliary/scanner/smb/smb_version"],
        "smb_version_2": ["nmap", "-sV", "--script=banner", target],
        "smb_null_session_auth_1": ["rpcclient", "-U", '""', target],
        "smb_null_session_auth_2": ["smbclient", "-L", target],
        "smb_null_session_auth_3": ["smbclient", f"//{target}/IPC$", "-N"],
        "smb_signing_required": ["nmap", "--script", "smb-security-mode", "-p445", target],
        "smb_signing_disabled": ["nmap", "--script", "smb-security-mode", "-p445", target],
        "smb_v1_vulnerabilities": ["nmap", "--script", "smb-protocols", target],
        "smb_eternalblue_1": ["nmap", "-p445", "--script", "smb-vuln-ms17-010", target],
        "smb_eternalblue_2": ["use", "exploit/windows/smb/ms17_010_eternalblue"]
    }

    print("Starting SMB vulnerability scans...")
    for scan_name, scan_command in smb_scans.items():
        print(f"Running {scan_name}...")
        result = subprocess.run(scan_command, capture_output=True, text=True)
        scan_results.append((scan_name, result.stdout + result.stderr))
    print("Completed SMB vulnerability scans.")

# After all scans are done, generate the PDF report
pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", size=12)
pdf.cell(200, 10, txt="SMB Vulnerability Scans Report", ln=True, align='C')

for scan_name, output in scan_results:
    pdf.ln(10)
    pdf.cell(200, 10, txt=scan_name, ln=True)
    pdf.multi_cell(0, 10, txt=output)

pdf.output("smb_scan_report.pdf")